<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<HTML>
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=UTF-8">
<META http-equiv="X-UA-Compatible" content="IE=8">
<TITLE>Created by BCL easyConverter SDK 3 (HTML Version)</TITLE>
<STYLE type="text/css">

body {margin-top: 0px;margin-left: 0px;}

#page_1 {position:relative; overflow: hidden;margin: 216px 0px 117px 166px;padding: 0px;border: none;width: 628px;}
#page_1 #id_1 {border:none;margin: 0px 0px 0px 0px;padding: 0px;border:none;width: 628px;overflow: hidden;}
#page_1 #id_2 {border:none;margin: 24px 0px 0px 226px;padding: 0px;border:none;width: 402px;overflow: hidden;}





#page_2 {position:relative; overflow: hidden;margin: 169px 0px 117px 166px;padding: 0px;border: none;width: 628px;}
#page_2 #id_1 {border:none;margin: 0px 0px 0px 0px;padding: 0px;border:none;width: 628px;overflow: hidden;}
#page_2 #id_2 {border:none;margin: 188px 0px 0px 226px;padding: 0px;border:none;width: 402px;overflow: hidden;}





#page_3 {position:relative; overflow: hidden;margin: 163px 0px 117px 166px;padding: 0px;border: none;width: 628px;}
#page_3 #id_1 {border:none;margin: 0px 0px 0px 0px;padding: 0px;border:none;width: 628px;overflow: hidden;}
#page_3 #id_2 {border:none;margin: 23px 0px 0px 226px;padding: 0px;border:none;width: 402px;overflow: hidden;}





#page_4 {position:relative; overflow: hidden;margin: 169px 0px 117px 166px;padding: 0px;border: none;width: 628px;}
#page_4 #id_1 {border:none;margin: 0px 0px 0px 0px;padding: 0px;border:none;width: 628px;overflow: hidden;}
#page_4 #id_2 {border:none;margin: 32px 0px 0px 226px;padding: 0px;border:none;width: 402px;overflow: hidden;}





#page_5 {position:relative; overflow: hidden;margin: 169px 0px 117px 166px;padding: 0px;border: none;width: 628px;}
#page_5 #id_1 {border:none;margin: 0px 0px 0px 0px;padding: 0px;border:none;width: 628px;overflow: hidden;}
#page_5 #id_2 {border:none;margin: 30px 0px 0px 226px;padding: 0px;border:none;width: 402px;overflow: hidden;}





#page_6 {position:relative; overflow: hidden;margin: 166px 0px 117px 166px;padding: 0px;border: none;width: 628px;}
#page_6 #id_1 {border:none;margin: 0px 0px 0px 0px;padding: 0px;border:none;width: 628px;overflow: hidden;}
#page_6 #id_2 {border:none;margin: 23px 0px 0px 226px;padding: 0px;border:none;width: 402px;overflow: hidden;}





#page_7 {position:relative; overflow: hidden;margin: 166px 0px 117px 166px;padding: 0px;border: none;width: 628px;}
#page_7 #id_1 {border:none;margin: 0px 0px 0px 0px;padding: 0px;border:none;width: 628px;overflow: hidden;}
#page_7 #id_2 {border:none;margin: 58px 0px 0px 226px;padding: 0px;border:none;width: 402px;overflow: hidden;}





#page_8 {position:relative; overflow: hidden;margin: 163px 0px 117px 166px;padding: 0px;border: none;width: 628px;}
#page_8 #id_1 {border:none;margin: 0px 0px 0px 0px;padding: 0px;border:none;width: 628px;overflow: hidden;}
#page_8 #id_2 {border:none;margin: 26px 0px 0px 226px;padding: 0px;border:none;width: 402px;overflow: hidden;}





.ft0{font: 23px 'Arial';line-height: 26px;}
.ft1{font: 16px 'Arial';line-height: 18px;}
.ft2{font: 19px 'Arial';line-height: 22px;}
.ft3{font: 12px 'Arial';line-height: 16px;}
.ft4{font: 13px 'Arial';line-height: 16px;}
.ft5{font: 11px 'Arial';line-height: 16px;}
.ft6{font: 15px 'Arial';line-height: 17px;}
.ft7{font: 16px 'Arial';margin-left: 16px;line-height: 18px;}
.ft8{font: 12px 'Arial';line-height: 15px;}
.ft9{font: 13px 'Arial';line-height: 20px;}
.ft10{font: 12px 'Arial';margin-left: 8px;line-height: 16px;}
.ft11{font: 13px 'Arial';margin-left: 8px;line-height: 16px;}
.ft12{font: 9px 'Arial';line-height: 12px;position: relative; bottom: -1px;}
.ft13{font: 12px 'Arial';line-height: 17px;}
.ft14{font: 9px 'Arial';line-height: 12px;position: relative; bottom: 5px;}
.ft15{font: 1px 'Arial';line-height: 1px;}
.ft16{font: 12px 'Arial';line-height: 13px;}
.ft17{font: 1px 'Arial';line-height: 13px;}
.ft18{font: 12px 'Arial';line-height: 14px;}
.ft19{font: 1px 'Arial';line-height: 14px;}

.p0{text-align: left;padding-left: 138px;margin-top: 0px;margin-bottom: 0px;}
.p1{text-align: left;padding-left: 49px;margin-top: 3px;margin-bottom: 0px;}
.p2{text-align: left;padding-left: 67px;margin-top: 19px;margin-bottom: 0px;}
.p3{text-align: left;padding-left: 112px;margin-top: 1px;margin-bottom: 0px;}
.p4{text-align: left;padding-left: 170px;margin-top: 13px;margin-bottom: 0px;}
.p5{text-align: left;margin-top: 36px;margin-bottom: 0px;}
.p6{text-align: justify;padding-right: 164px;margin-top: 14px;margin-bottom: 0px;}
.p7{text-align: left;margin-top: 22px;margin-bottom: 0px;}
.p8{text-align: left;margin-top: 14px;margin-bottom: 0px;}
.p9{text-align: justify;padding-left: 34px;margin-top: 11px;margin-bottom: 0px;}
.p10{text-align: justify;padding-left: 34px;margin-top: 10px;margin-bottom: 0px;}
.p11{text-align: left;margin-top: 10px;margin-bottom: 0px;}
.p12{text-align: left;margin-top: 0px;margin-bottom: 0px;}
.p13{text-align: justify;padding-left: 34px;padding-right: 164px;margin-top: 0px;margin-bottom: 0px;}
.p14{text-align: left;padding-right: 169px;margin-top: 10px;margin-bottom: 0px;}
.p15{text-align: left;margin-top: 23px;margin-bottom: 0px;}
.p16{text-align: left;padding-right: 169px;margin-top: 14px;margin-bottom: 0px;}
.p17{text-align: justify;padding-right: 164px;margin-top: 10px;margin-bottom: 0px;}
.p18{text-align: justify;padding-right: 169px;margin-top: 0px;margin-bottom: 0px;}
.p19{text-align: justify;padding-right: 169px;margin-top: 0px;margin-bottom: 0px;text-indent: 20px;}
.p20{text-align: justify;padding-right: 169px;margin-top: 14px;margin-bottom: 0px;}
.p21{text-align: left;margin-top: 19px;margin-bottom: 0px;}
.p22{text-align: justify;padding-right: 169px;margin-top: 9px;margin-bottom: 0px;}
.p23{text-align: justify;padding-right: 164px;margin-top: 0px;margin-bottom: 0px;}
.p24{text-align: justify;padding-left: 34px;margin-top: 8px;margin-bottom: 0px;}
.p25{text-align: left;padding-left: 34px;padding-right: 146px;margin-top: 10px;margin-bottom: 0px;}
.p26{text-align: justify;margin-top: 18px;margin-bottom: 0px;}
.p27{text-align: justify;padding-right: 169px;margin-top: 10px;margin-bottom: 0px;}
.p28{text-align: justify;padding-left: 34px;padding-right: 169px;margin-top: 9px;margin-bottom: 0px;}
.p29{text-align: justify;padding-left: 34px;padding-right: 169px;margin-top: 10px;margin-bottom: 0px;}
.p30{text-align: justify;padding-left: 34px;padding-right: 169px;margin-top: 0px;margin-bottom: 0px;}
.p31{text-align: justify;padding-left: 34px;padding-right: 169px;margin-top: 11px;margin-bottom: 0px;}
.p32{text-align: left;margin-top: 13px;margin-bottom: 0px;}
.p33{text-align: left;padding-left: 22px;margin-top: 9px;margin-bottom: 0px;}
.p34{text-align: left;padding-left: 22px;margin-top: 0px;margin-bottom: 0px;}
.p35{text-align: left;margin-top: 8px;margin-bottom: 0px;}
.p36{text-align: left;padding-left: 34px;margin-top: 11px;margin-bottom: 0px;}
.p37{text-align: left;padding-left: 146px;margin-top: 15px;margin-bottom: 0px;}
.p38{text-align: justify;padding-right: 164px;margin-top: 16px;margin-bottom: 0px;}
.p39{text-align: justify;padding-left: 34px;padding-right: 164px;margin-top: 14px;margin-bottom: 0px;}
.p40{text-align: justify;margin-top: 7px;margin-bottom: 0px;}
.p41{text-align: justify;padding-left: 34px;padding-right: 164px;margin-top: 10px;margin-bottom: 0px;text-indent: -34px;}
.p42{text-align: justify;padding-left: 34px;padding-right: 169px;margin-top: 10px;margin-bottom: 0px;text-indent: -34px;}
.p43{text-align: justify;padding-left: 34px;padding-right: 169px;margin-top: 11px;margin-bottom: 0px;text-indent: -34px;}
.p44{text-align: left;margin-top: 11px;margin-bottom: 0px;}
.p45{text-align: left;padding-left: 34px;margin-top: 10px;margin-bottom: 0px;}
.p46{text-align: justify;padding-right: 164px;margin-top: 11px;margin-bottom: 0px;}
.p47{text-align: justify;padding-right: 169px;margin-top: 11px;margin-bottom: 0px;}
.p48{text-align: justify;padding-left: 34px;margin-top: 5px;margin-bottom: 0px;}
.p49{text-align: left;padding-left: 285px;margin-top: 0px;margin-bottom: 0px;}
.p50{text-align: left;padding-left: 34px;padding-right: 169px;margin-top: 8px;margin-bottom: 0px;}
.p51{text-align: justify;padding-left: 34px;margin-top: 7px;margin-bottom: 0px;}
.p52{text-align: left;padding-left: 34px;padding-right: 164px;margin-top: 8px;margin-bottom: 0px;}
.p53{text-align: justify;padding-left: 34px;padding-right: 164px;margin-top: 8px;margin-bottom: 0px;}
.p54{text-align: justify;margin-top: 9px;margin-bottom: 0px;}
.p55{text-align: justify;padding-left: 34px;padding-right: 169px;margin-top: 6px;margin-bottom: 0px;}
.p56{text-align: left;margin-top: 6px;margin-bottom: 0px;}
.p57{text-align: left;margin-top: 18px;margin-bottom: 0px;}
.p58{text-align: justify;padding-right: 169px;padding-top: 1px;margin-top: 10px;margin-bottom: 0px;}
.p59{text-align: left;padding-left: 44px;margin-top: 15px;margin-bottom: 0px;}
.p60{text-align: justify;padding-left: 34px;padding-right: 164px;margin-top: 11px;margin-bottom: 0px;}
.p61{text-align: justify;margin-top: 19px;margin-bottom: 0px;}
.p62{text-align: left;padding-right: 169px;margin-top: 13px;margin-bottom: 0px;}
.p63{text-align: left;margin-top: 0px;margin-bottom: 0px;white-space: nowrap;}
.p64{text-align: left;padding-left: 22px;margin-top: 0px;margin-bottom: 0px;white-space: nowrap;}
.p65{text-align: left;padding-left: 14px;margin-top: 0px;margin-bottom: 0px;white-space: nowrap;}
.p66{text-align: right;padding-right: 8px;margin-top: 0px;margin-bottom: 0px;white-space: nowrap;}
.p67{text-align: left;padding-left: 86px;margin-top: 0px;margin-bottom: 0px;white-space: nowrap;}
.p68{text-align: left;margin-top: 7px;margin-bottom: 0px;}
.p69{text-align: justify;padding-left: 34px;padding-right: 169px;margin-top: 7px;margin-bottom: 0px;}
.p70{text-align: justify;padding-left: 34px;padding-right: 169px;margin-top: 8px;margin-bottom: 0px;}
.p71{text-align: left;margin-top: 5px;margin-bottom: 0px;}
.p72{text-align: left;padding-left: 25px;margin-top: 0px;margin-bottom: 0px;white-space: nowrap;}
.p73{text-align: left;padding-left: 4px;margin-top: 0px;margin-bottom: 0px;white-space: nowrap;}
.p74{text-align: left;margin-top: 1px;margin-bottom: 0px;}

.td0{padding: 0px;margin: 0px;width: 137px;vertical-align: bottom;}
.td1{padding: 0px;margin: 0px;width: 36px;vertical-align: bottom;}
.td2{padding: 0px;margin: 0px;width: 100px;vertical-align: bottom;}
.td3{padding: 0px;margin: 0px;width: 93px;vertical-align: bottom;}
.td4{padding: 0px;margin: 0px;width: 173px;vertical-align: bottom;}
.td5{padding: 0px;margin: 0px;width: 193px;vertical-align: bottom;}
.td6{padding: 0px;margin: 0px;width: 230px;vertical-align: bottom;}
.td7{padding: 0px;margin: 0px;width: 65px;vertical-align: bottom;}
.td8{padding: 0px;margin: 0px;width: 72px;vertical-align: bottom;}
.td9{padding: 0px;margin: 0px;width: 330px;vertical-align: bottom;}
.td10{padding: 0px;margin: 0px;width: 136px;vertical-align: bottom;}
.td11{padding: 0px;margin: 0px;width: 186px;vertical-align: bottom;}
.td12{padding: 0px;margin: 0px;width: 79px;vertical-align: bottom;}
.td13{padding: 0px;margin: 0px;width: 118px;vertical-align: bottom;}
.td14{padding: 0px;margin: 0px;width: 126px;vertical-align: bottom;}
.td15{padding: 0px;margin: 0px;width: 158px;vertical-align: bottom;}
.td16{padding: 0px;margin: 0px;width: 43px;vertical-align: bottom;}
.td17{padding: 0px;margin: 0px;width: 83px;vertical-align: bottom;}
.td18{padding: 0px;margin: 0px;width: 241px;vertical-align: bottom;}

.tr0{height: 16px;}
.tr1{height: 13px;}
.tr2{height: 15px;}
.tr3{height: 14px;}
.tr4{height: 29px;}
.tr5{height: 17px;}

.t0{width: 503px;margin-top: 4px;font: 12px 'Arial';}
.t1{width: 265px;margin-left: 22px;margin-top: 11px;font: 12px 'Arial';}
.t2{width: 402px;margin-left: 22px;margin-top: 14px;font: 12px 'Arial';}

</STYLE>
</HEAD>

<BODY>
<DIV id="page_1">


<DIV id="id_1">
<P class="p0 ft0">RobotRace 2015/15</P>
<P class="p1 ft0">2IV60 Computer Graphics Assignment</P>
<P class="p2 ft1">Jack van Wijk, Kasper Dinkla, Paul van der Corput</P>
<P class="p3 ft1">Eindhoven University of Technology</P>
<P class="p4 ft1">November 3, 2015</P>
<P class="p5 ft2">Introduction</P>
<P class="p6 ft3">This document contains the assignments for the course 2IV60 Computer Graphics of the Faculty of Mathematics and Computer Science of Eindhoven University of Tech- nology. The assignment is split up into a number of exercises, where in each exercise a graphic application is developed further, using the material presented in the course. As- signments should be done by pairs of students, forming pairs is left to the students. The overall theme is RobotRace: Students have to prepare an animated view of simpliﬁed human ﬁgures, moving over a race track.</P>
<P class="p7 ft2">RobotRace.zip</P>
<P class="p6 ft3">A template project is provided to enable students to make a quick start and to focus on graphics. It provides a simple user interface for the assignment; a class Vector is provided, with a number of basic operations; and a minimal working example. The class RobotRace describes the overall scene, and contains instances of the classes Robot, Camera, RaceTrack, and Terrain. The current state of the user in- terface is recorded in a variable gs (an instance of the class GlobalState). The attributes of gs describe the current state, including aspects like what has to be shown and how. Appendix A gives an overview of gs. All attributes of gs are controlled by the interface provided; students can focus on reﬁning methods in the template project, such as setView() and drawScene(). These are in the ﬁle RobotRace.java.</P>
<P class="p7 ft2">Preparation</P>
<P class="p8 ft4">Install NetBeans and the Java Development Kit, if you have not done so already:</P>
<P class="p9 ft4">Go to http://www.oracle.com/technetwork/java/javase/downloads;</P>
<P class="p10 ft4">Choose the NetBeans option (captioned JDK 8u... + NetBeans);</P>
<P class="p10 ft4">Accept the license agreement;</P>
<P class="p9 ft4">Download and run the installer that matches your platform.</P>
<P class="p11 ft4">Next:</P>
</DIV>
<DIV id="id_2">
<P class="p12 ft4">1</P>
</DIV>
</DIV>
<DIV id="page_2">


<DIV id="id_1">
<P class="p13 ft3">download the ﬁle RobotRace.zip from Oase (http://oase.tue.nl, 2IV60 Computer Graphics) or from the course page (http://www.win.tue.nl/˜vanwijk/2IV60), and extract its contents to a local folder.</P>
<P class="p9 ft4">Start NetBeans and open the project RobotRace.</P>
<P class="p14 ft4">Finally, read this document, to get an overview and to be aware of features asked for following rounds.</P>
<P class="p15 ft2">Submission</P>
<P class="p16 ft4">Results of the assignment have to be submitted in two rounds. The strict deadlines for submission are:</P>
<P class="p10 ft4">Round 1: Monday November 30, 2015 (after 3 weeks);</P>
<P class="p9 ft4">Round 2: Monday January, 11, 2016 (after 7 weeks).</P>
<P class="p17 ft3">Students are recommended to work on the assignments throughout the course, and not to wait for the last days before the deadlines. Results must be submitted via Peach (http://peach.win.tue.nl), under the course Computer Graphics. For each round, stu- dents submit the java source ﬁles Camera.java, Material.java, RaceTrack</P>
<P class="p18 ft4">.java, Robot.java, RobotRace.java, and Terrain.java. For the second round, additional texture ﬁles must be submitted. Please upload them separately, so not packed in one archive ﬁle. One submission per pair of students sufﬁces.</P>
<P class="p12 ft4">The instructors:</P>
<P class="p9 ft4">check (via Peach) if the work submitted is original work;</P>
<P class="p10 ft4">check if the required features have been implemented;</P>
<P class="p9 ft4">judge the code on understandability and explanations provided via comments.</P>
<P class="p17 ft5">Concerning comments, the following guidelines apply. About half of the program should consist of comments. New methods must be provided with a description of their effect and of all parameters; all variables must be described, as well as all loops. Furthermore, <NOBR>non-trivial</NOBR> steps must be described, possibly including derivations. En- able the human reader of the program to understand quickly what is done and why.</P>
<P class="p19 ft4">Results should not produce OpenGL errors, caught through glGetError at the end of each rendering cycle in the given framework for RobotRace.</P>
<P class="p19 ft4">For the ﬁrst round maximally 100 points can be scored; for the second round 200 points. Per part the number of points is indicated.</P>
</DIV>
<DIV id="id_2">
<P class="p12 ft4">2</P>
</DIV>
</DIV>
<DIV id="page_3">


<DIV id="id_1">
<P class="p12 ft2">1 Round 1: Robots</P>
<P class="p20 ft4">In all assignments we assume a world space coordinate system with meters as units, and with the <NOBR>Z-axis</NOBR> pointing up.</P>
<P class="p21 ft1">1.1 Axis frame - 20 points</P>
<P class="p22 ft4">Elaborate the method RobotRace.drawAxisFrame() to draw a standard axis frame. The axes have length 1 meter, are aligned with the X, Y , and Z axes, and consist of a block with a cone at the end to show the direction. Show the position of the origin with a yellow sphere. Use red, green, and blue as colors for the three axes. Draw the frame if gs.showAxes is true. Use glutSolidCube(), glutSolidCone(), and glutSolidSphere() for drawing the primitives, and standard OpenGL trans- formation functions to position and scale them. Call RobotRace.drawAxisFrame from RobotRace.drawScene.</P>
<P class="p21 ft1">1.2 Viewing - 20 points</P>
<P class="p11 ft4">In this exercise we extend the given methods RobotRace.setView() and Camera</P>
<P class="p23 ft4">.setDefaultMode(). The Z axis must point upward, and the center point is given by gs.cnt. For the speciﬁcation of the eye point we adopt a spherical coordinates approach. Suppose V is a vector pointing from the center point to the eye point. Its direction is speciﬁed by two angles: the azimuth angle gs.theta (angle between V projected on XY <NOBR>-plane</NOBR> and positive X axis) and an inclination angle gs.phi (angle between V and XY <NOBR>-plane).</NOBR> Furthermore, the distance of the eye point to the center point gs.cnt is given by gs.vDist, and the width of the scene to be displayed is given by gs.vWidth. Speciﬁcally, consider a line through the center point C, perpendicular on the view direction and parallel with the XY <NOBR>-plane.</NOBR> This line is shown horizontally on the screen. The projection has to be set such that the visible part of this line has length gs.vWidth.</P>
<P class="p24 ft4">Derive the position of the eye point E from these parameters;</P>
<P class="p25 ft4">Implement the viewing transform using gluLookat() and gluPerspective() according to this speciﬁcation. The last function requires values for znear and zfar. Here for instance 0.1*gs.vDist and 10.0*gs.vDist can be used.</P>
<P class="p26 ft1"><SPAN class="ft6">1.3</SPAN><SPAN class="ft7">Robot - 40 points</SPAN></P>
<P class="p27 ft4">Model and draw a robot. This robot consists of at least the following elements: a torso, a head, two arms and two legs. Each of these elements is displayed using one or more shapes, such as spheres, ellipsoids, blocks, and cones.</P>
<P class="p28 ft4">Think about your robot. What do you want to express? Do you aim at PlayMobil style or at a ﬁgure of a science ﬁction movie?</P>
<P class="p29 ft4">Design your robot on paper. Start with a <NOBR>stick-ﬁgure,</NOBR> where the positions of important points, such as joints, are indicated, connected by lines; next attach shapes. Make multiple sketches until you are satisﬁed. Use views from front and side. Use as convention that the robot stands on the origin, with the length axis along the Z axis, and looks in the direction of the positive Y axis. Use meters as units, give your robot a human size.</P>
</DIV>
<DIV id="id_2">
<P class="p12 ft4">3</P>
</DIV>
</DIV>
<DIV id="page_4">


<DIV id="id_1">
<P class="p30 ft4">Deﬁne parameters to describe the shapes and the relative positions of the ele- ments. Choose these parameters such that you can later on easily manipulate (position, vary in shape, draw, move) the robot. Extend the given class Robot with a set of variables for these parameters;</P>
<P class="p31 ft4">Implement the method Robot.draw() and call it to show an instance of your robot. If gs.showStick is true, a schematic <NOBR>stick-ﬁgure</NOBR> has to be shown, else the robot with all shapes attached.</P>
<P class="p14 ft4">A practical remark: Do not use the variable names track, brick, head, and torso, as this will give rise to clashes of names of textures to be used later.</P>
<P class="p21 ft1">1.4 Shading - 20 points</P>
<P class="p11 ft4">Add shading and lighting:</P>
<P class="p31 ft4">Enable shading, ambient light and one light source. Use a light source at inﬁnity. The direction of the light is such that light comes more or less from the direction of the camera. The direction of the light is shifted by 10 degrees to the left and upwards with regard to the view direction.</P>
<P class="p29 ft4">Deﬁne four sets of material properties for diffuse and specular reﬂection in the enum Material, to give (parts of) the robot a <NOBR>gold-like,</NOBR> <NOBR>silver-like,</NOBR> <NOBR>wood-like,</NOBR> and an orange plastic look. Show four robots side by side, such that they are easy to compare.</P>
<P class="p15 ft2">2 Round 2: Robots on the move</P>
<P class="p32 ft1">2.1 Race track - 30 points</P>
<P class="p22 ft4">Next we consider the race track. Suppose the centerline of the track is deﬁned as a curve P(t); t 2 [0; 1], and that the curve has a tangent vector V (t). The given class RaceTrack deﬁnes two methods for this:</P>
<P class="p33 ft8">Vector getPoint(double t);</P>
<P class="p34 ft8">Vector getTangent(double t);</P>
<P class="p35 ft4">which should return the position and tangent for the parameter t 2 [0; 1].</P>
<P class="p36 ft4">We work with a test track. Implement getPoint() and getTangent() for</P>
<P class="p37 ft4">P(t) = (10 cos(2 t); 14 sin(2 t); 1):</P>
<P class="p38 ft3">Given this centerline, we deﬁne the track as follows. It should consist of 4 lanes, with each lane being 1:22 meters wide. The track can be assumed to be ﬂat, in the plane z = 1. Furthermore, the track has sides: polygons from the boundary of the track to the plane z = 1, such that it looks like the track is on a solid concrete foundation.</P>
<P class="p39 ft3">Draw the track in RaceTrack.draw() and use the methods getPoint() and getTangent(). Determine the number of triangles or quads such that the track looks reasonably smooth, while not using too many elements. Make sure that normals are calculated and set properly: <NOBR>unit-length,</NOBR> pointing outward.</P>
</DIV>
<DIV id="id_2">
<P class="p12 ft4">4</P>
</DIV>
</DIV>
<DIV id="page_5">


<DIV id="id_1">
<P class="p13 ft3">Let the robots move over the track. If gs.tAnim=0, the robots are positioned at the start line, after that they move along the track. At ﬁrst, let the robots move with a constant speed, next, introduce some variation in their speed during the race, such that the race is more interesting to watch. Implement and call</P>
<P class="p30 ft9">RaceTrack.getLanePoint() and RaceTrack.getLaneTangent() to ﬁnd the position and orientation of a robot in a given lane for a given parameter t 2 [0; 1].</P>
<P class="p40 ft1"><SPAN class="ft6">2.2</SPAN><SPAN class="ft7">Moving camera - 20 points</SPAN></P>
<P class="p14 ft4">Now that we have a race, we want to follow it in a natural and exciting way. The parameter gs.camMode gives various options:</P>
<P class="p41 ft3"><SPAN class="ft4">0:</SPAN><SPAN class="ft10">Default camera, gives an overview and enables the user to view it from different sides. This camera model is similar to the one deﬁned in assignment 1.2, in the sense that a natural center is chosen and that the user can view the scene from different directions, using a spherical coordinates approach.</SPAN></P>
<P class="p42 ft4"><SPAN class="ft4">1:</SPAN><SPAN class="ft11">Helicopter mode. The robots are followed by a helicopter that ﬂies above the robots, such that they are shown centered and from above;</SPAN></P>
<P class="p42 ft4"><SPAN class="ft4">2:</SPAN><SPAN class="ft11">Motor cycle mode. The (leading) robots are shown from the side, as if the camera man is located at a motor that drives along with them;</SPAN></P>
<P class="p43 ft4"><SPAN class="ft4">3:</SPAN><SPAN class="ft11">First person mode. Suppose each robot has a camera mounted on top, give the view from the perspective of the last robot in the race;</SPAN></P>
<P class="p42 ft4"><SPAN class="ft4">4:</SPAN><SPAN class="ft11">Auto mode. Switch automatically between the previous modes (or more), to get a lively and entertaining animation.</SPAN></P>
<P class="p44 ft4">The task is now:</P>
<P class="p45 ft4">Adjust the viewing model to handle these options.</P>
<P class="p46 ft3">For camera modes 1 and 2, a (group of) robots has to be selected to focus on. You are free to make a choice here. The most simple (and most boring) option is to focus on just one particular robot, it is more interesting to change the focus periodically over all robots. Aim for an interesting result, and explain your choice in the comments in your code. The modes can be implemented in Camera.setHelicopterMode(),</P>
<P class="p18 ft4">Camera.setMotorCycleMode(), Camera.setFirstPersonMode(), and Camera.setAutoMode().</P>
<P class="p21 ft1">2.3 Walking robots - 30 points</P>
<P class="p22 ft4">So far, the robots were allowed to slide over the track as rigid objects, next we make this more interesting:</P>
<P class="p31 ft4">Let the robots walk or run over the track with separately moving limbs. Try to make the motion look natural, without slip.</P>
<P class="p47 ft4">Feel free to use separate ankle, elbow, knee, and wrist joints; let your robots walk and jump. And how about To Di World (when a robot has won the race in a new world record) or walking Gangnam Style?</P>
</DIV>
<DIV id="id_2">
<P class="p12 ft4">5</P>
</DIV>
</DIV>
<DIV id="page_6">


<DIV id="id_1">
<P class="p12 ft1">2.4 Spline tracks - 30 points</P>
<P class="p27 ft4">Deﬁne the centerline of the track using cubic Bezier´ segments. A track is deﬁned by a sequence of control points P<SPAN class="ft12">i</SPAN>; i = 0; :::; 3N, where N is the number of segments and each sequence of points P<SPAN class="ft12">3k</SPAN>; P<SPAN class="ft12">3k+1</SPAN>; P<SPAN class="ft12">3k+2</SPAN>; P<SPAN class="ft12">3k+3 </SPAN>deﬁnes a segment. To obtain a closed track, P<SPAN class="ft12">0 </SPAN>= P<SPAN class="ft12">3N </SPAN>should hold.</P>
<P class="p48 ft4">Implement the method</P>
<P class="p9 ft8">Vector getCubicBezierPnt(double t, Vector P0, Vector P1,</P>
<P class="p49 ft8">Vector P2, Vector P3);</P>
<P class="p50 ft4">in the class RaceTrack to evaluate a cubic Bezier´ segment for parameter value t.</P>
<P class="p51 ft4">Implement the function</P>
<P class="p9 ft8">Vector getCubicBezierTng(double t, Vector P0, Vector P1,</P>
<P class="p49 ft8">Vector P2, Vector P3);</P>
<P class="p52 ft4">in the class RaceTrack to evaluate the tangent of a cubic Bezier´ segment for parameter value t. Implement these methods within RobotRace.</P>
<P class="p53 ft13">Deﬁne and show different tracks, deﬁned by cubic segments. Dependent on the value of gs.trackNr, different tracks are used. If gs.trackNr is 0, the test track of assignment 2.1 is used, for higher values tracks deﬁned by cubic segments are used: (1) a track in the form of a letter O; (2) the outline of the letter L; (3) the outline of the letter C; or (4) a track you deﬁned yourself is shown. The race tracks with their control points are initialized in the constructor of RobotRace. Deﬁne the tracks such that all corners are smooth. Make sure that the tracks ﬁt in an area x; y 2 [ 20; 20].</P>
<P class="p54 ft1"><SPAN class="ft6">2.5</SPAN><SPAN class="ft7">Textured tracks - 30 points</SPAN></P>
<P class="p11 ft4">Use texture mapping to decorate the track and the robots.</P>
<P class="p55 ft4">Design a texture track.jpg for the track, showing the lanes, indications of distance traversed, and possibly track numbers. Use a texture that is replicated about each <NOBR>10-20</NOBR> meter. Map the texture on the track such that distortion along the centerline is minimal.</P>
<P class="p53 ft3">Design a texture brick.jpg for the side of the track, pretending the mass below the track is constructed from large bricks, and map it to the sides. Again, minimize distortion, to pretend that the same bricks are used throughout.</P>
<P class="p56 ft4">Put the two textures (track.jpg, brick.jpg) in the same folder as RobotRace</P>
<P class="p18 ft4">.java. Read the comments in the given template (see ”Textures”) for information on how to load and bind these textures.</P>
<P class="p57 ft1">2.6 Textured robots - 10 points</P>
<P class="p17 ft3">Apply also texture to the heads and torsos of the robots, using textures head.jpg and torso.jpg. Note that basic <NOBR>GLUT-objects,</NOBR> such as cubes, do not provide texture coordinates. One solution to ﬁx this is to draw an additional quad for for instance the face of a robot; another solution is to draw cubes yourself via a new method. Put the two textures (head.jpg, torso.jpg) in the same folder as RobotRace.java.</P>
</DIV>
<DIV id="id_2">
<P class="p12 ft4">6</P>
</DIV>
</DIV>
<DIV id="page_7">


<DIV id="id_1">
<P class="p12 ft1">2.7 Terrain - 30 points</P>
<P class="p58 ft4">Next, we add a terrain. The terrain is given as a height ﬁeld height : [ 20; 20]<SPAN class="ft14">2 </SPAN>! [ 1; 1]. Such a height ﬁeld can be deﬁned in many ways. Here we give a simple height ﬁeld, deﬁned as the sum of two cosine waves:</P>
<P class="p59 ft4">height(x; y) = 0:6 cos(0:3 x + 0:2 y) + 0:4 cos(x 0:5 y);</P>
<P class="p27 ft4">but there are many other options, like using a <NOBR>Bezier´-surface,</NOBR> measured data, and pro- cedural methods to produce fractal landscapes.</P>
<P class="p31 ft4">Implement the method Terrain.heightAt() that computes the height at each location (x; y).</P>
<P class="p60 ft4">Show the given height ﬁeld in the scene by implementing Terrain.draw(). Approximate the height ﬁeld by a mesh of triangles or quads. Make sure that normals are calculated and set properly: <NOBR>unit-length,</NOBR> pointing outward.</P>
<P class="p29 ft4">Use 1D texturing for the height ﬁeld to give the effect that areas below zero are blue (water), from 0 to 0.5 meter yellow (sand), and from 0.5 meter and higher green (grass).</P>
<P class="p10 ft4">Add a transparent, grey polygon at the z = 0 level, to simulate a water surface.</P>
<P class="p61 ft1"><SPAN class="ft6">2.8</SPAN><SPAN class="ft7">Extra features - 20 points</SPAN></P>
<P class="p14 ft4">The scene is still somewhat empty, here are some more challenges. Successful imple- mentation of two of these is awarded with 20 points.</P>
<P class="p60 ft3">Add trees to the scene, making sure they are not on the tracks. Trees must consist of at least three primitives and must have variation in size and shape;</P>
<P class="p29 ft4">Add a digital clock, either in the scene or on screen, which shows the current time;</P>
<P class="p31 ft4">Add a PictureInPicture option: Show a separate view from a different camera in a small viewport on top of the standard view;</P>
<P class="p10 ft4">Add a large <NOBR>video-screen</NOBR> in the scene, which shows a <NOBR>close-up</NOBR> from the race;</P>
<P class="p31 ft4">Add obstacles on the track, which have to be circumvented, climbed or jumped over by the robots;</P>
<P class="p29 ft4">Allow the robots to leave their lanes and select an optimal track, while avoiding the other robots;</P>
<P class="p31 ft4">Use a smooth animation when the view is changed from one camera position to another;</P>
<P class="p10 ft4">Deﬁne a custom height ﬁeld, mimicking a more realistic mountain landscape;</P>
<P class="p31 ft4">Deﬁne the track such that it is always 1 m above the terrain, while the bricks deﬁned in the texture are still horizontal.</P>
</DIV>
<DIV id="id_2">
<P class="p12 ft4">7</P>
</DIV>
</DIV>
<DIV id="page_8">


<DIV id="id_1">
<P class="p12 ft2">Appendix A - Global State</P>
<P class="p62 ft4">The instance gs of class GlobalState contains the state variables that describe the scene to be displayed. The class GlobalState is described by:</P>
<TABLE cellpadding=0 cellspacing=0 class="t0">
<TR>
	<TD colspan=2 class="tr0 td0"><P class="p63 ft8">class GlobalState {</P></TD>
	<TD class="tr0 td1"><P class="p63 ft15">&nbsp;</P></TD>
	<TD class="tr0 td2"><P class="p63 ft15">&nbsp;</P></TD>
	<TD class="tr0 td3"><P class="p63 ft15">&nbsp;</P></TD>
	<TD class="tr0 td0"><P class="p63 ft15">&nbsp;</P></TD>
</TR>
<TR>
	<TD colspan=3 class="tr1 td4"><P class="p64 ft16">boolean showAxes; //</P></TD>
	<TD colspan=2 class="tr1 td5"><P class="p63 ft16">Show an axis frame if true</P></TD>
	<TD class="tr1 td0"><P class="p63 ft17">&nbsp;</P></TD>
</TR>
<TR>
	<TD colspan=3 class="tr2 td4"><P class="p64 ft8">boolean showStick;//</P></TD>
	<TD class="tr2 td2"><P class="p63 ft8">Show robot(s)</P></TD>
	<TD colspan=2 class="tr2 td6"><P class="p63 ft8">as stick figures</P></TD>
</TR>
<TR>
	<TD class="tr3 td7"><P class="p64 ft18">int</P></TD>
	<TD class="tr3 td8"><P class="p65 ft18">trackNr;</P></TD>
	<TD class="tr3 td1"><P class="p66 ft18">//</P></TD>
	<TD class="tr3 td2"><P class="p63 ft18">Track to use:</P></TD>
	<TD class="tr3 td3"><P class="p63 ft19">&nbsp;</P></TD>
	<TD class="tr3 td0"><P class="p63 ft19">&nbsp;</P></TD>
</TR>
<TR>
	<TD class="tr2 td7"><P class="p63 ft15">&nbsp;</P></TD>
	<TD class="tr2 td8"><P class="p63 ft15">&nbsp;</P></TD>
	<TD class="tr2 td1"><P class="p66 ft8">//</P></TD>
	<TD colspan=2 class="tr2 td5"><P class="p63 ft8">0 <NOBR>-&gt;</NOBR> test; 1 <NOBR>-&gt;</NOBR> O; 2 <NOBR>-&gt;</NOBR> L;</P></TD>
	<TD class="tr2 td0"><P class="p63 ft8">3 <NOBR>-&gt;</NOBR> C; 4 <NOBR>-&gt;</NOBR> custom</P></TD>
</TR>
<TR>
	<TD class="tr4 td7"><P class="p64 ft8">float</P></TD>
	<TD class="tr4 td8"><P class="p63 ft8">tAnim;</P></TD>
	<TD class="tr4 td1"><P class="p66 ft8">//</P></TD>
	<TD colspan=3 class="tr4 td9"><P class="p63 ft8">Time since start of animation in seconds</P></TD>
</TR>
<TR>
	<TD class="tr4 td7"><P class="p64 ft8">int</P></TD>
	<TD class="tr4 td8"><P class="p63 ft8">w;</P></TD>
	<TD class="tr4 td1"><P class="p66 ft8">//</P></TD>
	<TD colspan=2 class="tr4 td5"><P class="p63 ft8">Width of window in pixels</P></TD>
	<TD class="tr4 td0"><P class="p63 ft15">&nbsp;</P></TD>
</TR>
<TR>
	<TD class="tr2 td7"><P class="p64 ft8">int</P></TD>
	<TD class="tr2 td8"><P class="p63 ft8">h;</P></TD>
	<TD class="tr2 td1"><P class="p66 ft8">//</P></TD>
	<TD colspan=2 class="tr2 td5"><P class="p63 ft8">Height of window in pixels</P></TD>
	<TD class="tr2 td0"><P class="p63 ft15">&nbsp;</P></TD>
</TR>
<TR>
	<TD class="tr4 td7"><P class="p64 ft8">Vector</P></TD>
	<TD class="tr4 td8"><P class="p65 ft8">cnt;</P></TD>
	<TD class="tr4 td1"><P class="p66 ft8">//</P></TD>
	<TD class="tr4 td2"><P class="p63 ft8">Center point</P></TD>
	<TD class="tr4 td3"><P class="p63 ft15">&nbsp;</P></TD>
	<TD class="tr4 td0"><P class="p63 ft15">&nbsp;</P></TD>
</TR>
<TR>
	<TD class="tr2 td7"><P class="p64 ft8">float</P></TD>
	<TD class="tr2 td8"><P class="p65 ft8">vDist;</P></TD>
	<TD class="tr2 td1"><P class="p66 ft8">//</P></TD>
	<TD colspan=3 class="tr2 td9"><P class="p63 ft8">Distance eye point to center point</P></TD>
</TR>
<TR>
	<TD class="tr3 td7"><P class="p64 ft18">float</P></TD>
	<TD class="tr3 td8"><P class="p65 ft18">vWidth;</P></TD>
	<TD class="tr3 td1"><P class="p66 ft18">//</P></TD>
	<TD colspan=2 class="tr3 td5"><P class="p63 ft18">Width of scene to be shown</P></TD>
	<TD class="tr3 td0"><P class="p63 ft19">&nbsp;</P></TD>
</TR>
<TR>
	<TD class="tr2 td7"><P class="p64 ft8">float</P></TD>
	<TD class="tr2 td8"><P class="p65 ft8">phi;</P></TD>
	<TD class="tr2 td1"><P class="p66 ft8">//</P></TD>
	<TD colspan=3 class="tr2 td9"><P class="p63 ft8">Elevation (colatitude) angle in radians</P></TD>
</TR>
<TR>
	<TD class="tr2 td7"><P class="p64 ft8">float</P></TD>
	<TD class="tr2 td8"><P class="p65 ft8">theta;</P></TD>
	<TD class="tr2 td1"><P class="p66 ft8">//</P></TD>
	<TD class="tr2 td2"><P class="p63 ft8">Azimuth angle</P></TD>
	<TD class="tr2 td3"><P class="p63 ft8">in radians</P></TD>
	<TD class="tr2 td0"><P class="p63 ft15">&nbsp;</P></TD>
</TR>
<TR>
	<TD class="tr4 td7"><P class="p64 ft8">int</P></TD>
	<TD class="tr4 td8"><P class="p63 ft8">camMode;</P></TD>
	<TD colspan=2 class="tr4 td10"><P class="p63 ft8">// In race mode: 0</P></TD>
	<TD class="tr4 td3"><P class="p63 ft8"><NOBR>-&gt;</NOBR> overview,</P></TD>
	<TD class="tr4 td0"><P class="p63 ft15">&nbsp;</P></TD>
</TR>
<TR>
	<TD class="tr3 td7"><P class="p63 ft19">&nbsp;</P></TD>
	<TD class="tr3 td8"><P class="p63 ft19">&nbsp;</P></TD>
	<TD class="tr3 td1"><P class="p63 ft18">//</P></TD>
	<TD class="tr3 td2"><P class="p67 ft18">1</P></TD>
	<TD colspan=2 class="tr3 td6"><P class="p63 ft18"><NOBR>-&gt;</NOBR> tracking helicopter</P></TD>
</TR>
<TR>
	<TD class="tr2 td7"><P class="p63 ft15">&nbsp;</P></TD>
	<TD class="tr2 td8"><P class="p63 ft15">&nbsp;</P></TD>
	<TD class="tr2 td1"><P class="p63 ft8">//</P></TD>
	<TD class="tr2 td2"><P class="p67 ft8">2</P></TD>
	<TD class="tr2 td3"><P class="p63 ft8"><NOBR>-&gt;</NOBR> view from</P></TD>
	<TD class="tr2 td0"><P class="p63 ft8">the side on leader,</P></TD>
</TR>
<TR>
	<TD class="tr2 td7"><P class="p63 ft15">&nbsp;</P></TD>
	<TD class="tr2 td8"><P class="p63 ft15">&nbsp;</P></TD>
	<TD class="tr2 td1"><P class="p63 ft8">//</P></TD>
	<TD class="tr2 td2"><P class="p67 ft8">3</P></TD>
	<TD class="tr2 td3"><P class="p63 ft8"><NOBR>-&gt;</NOBR> viewpoint</P></TD>
	<TD class="tr2 td0"><P class="p63 ft8">of the last robot,</P></TD>
</TR>
<TR>
	<TD class="tr3 td7"><P class="p63 ft19">&nbsp;</P></TD>
	<TD class="tr3 td8"><P class="p63 ft19">&nbsp;</P></TD>
	<TD class="tr3 td1"><P class="p63 ft18">//</P></TD>
	<TD class="tr3 td2"><P class="p67 ft18">4</P></TD>
	<TD class="tr3 td3"><P class="p63 ft18"><NOBR>-&gt;</NOBR> autoswitch</P></TD>
	<TD class="tr3 td0"><P class="p63 ft19">&nbsp;</P></TD>
</TR>
<TR>
	<TD class="tr2 td7"><P class="p63 ft8">}</P></TD>
	<TD class="tr2 td8"><P class="p63 ft15">&nbsp;</P></TD>
	<TD class="tr2 td1"><P class="p63 ft15">&nbsp;</P></TD>
	<TD class="tr2 td2"><P class="p63 ft15">&nbsp;</P></TD>
	<TD class="tr2 td3"><P class="p63 ft15">&nbsp;</P></TD>
	<TD class="tr2 td0"><P class="p63 ft15">&nbsp;</P></TD>
</TR>
</TABLE>
<P class="p68 ft4">The values of the parameters can be set with the given user interface:</P>
<P class="p69 ft4">The camera viewpoint angles, phi and theta, are changed interactively by holding the left mouse button and dragging;</P>
<P class="p70 ft4">The camera view width, vWidth, is changed interactively by holding the right mouse button and dragging upwards or downwards;</P>
<P class="p28 ft4">The center point cnt can be moved up and down by pressing the ’q’ and ’z’ keys, forwards and backwards with the ’w’ and ’s’ keys, and left and right with the ’a’ and ’d’ keys;</P>
<P class="p24 ft4">Other settings are changed via the menus at the top of the screen.</P>
<P class="p71 ft4">The main elements of the class RobotRace are:</P>
<P class="p35 ft8">class RobotRace extends Base {</P>
<TABLE cellpadding=0 cellspacing=0 class="t1">
<TR>
	<TD class="tr5 td11"><P class="p63 ft8">private final Robot[]</P></TD>
	<TD class="tr5 td12"><P class="p63 ft8">robots;</P></TD>
</TR>
<TR>
	<TD class="tr1 td11"><P class="p63 ft16">private final Camera</P></TD>
	<TD class="tr1 td12"><P class="p63 ft16">camera;</P></TD>
</TR>
<TR>
	<TD class="tr2 td11"><P class="p63 ft8">private final RaceTrack[]</P></TD>
	<TD class="tr2 td12"><P class="p63 ft8">racetracks;</P></TD>
</TR>
<TR>
	<TD class="tr2 td11"><P class="p63 ft8">private final Terrain</P></TD>
	<TD class="tr2 td12"><P class="p63 ft8">terrain;</P></TD>
</TR>
</TABLE>
<TABLE cellpadding=0 cellspacing=0 class="t2">
<TR>
	<TD class="tr0 td13"><P class="p63 ft8">initialize();</P></TD>
	<TD colspan=2 class="tr0 td14"><P class="p72 ft8">// Initialize</P></TD>
	<TD class="tr0 td15"><P class="p63 ft8">(OpenGL) settings</P></TD>
</TR>
<TR>
	<TD class="tr3 td13"><P class="p63 ft18">setView();</P></TD>
	<TD class="tr3 td16"><P class="p72 ft18">//</P></TD>
	<TD class="tr3 td17"><P class="p73 ft18">Initialize</P></TD>
	<TD class="tr3 td15"><P class="p63 ft18">viewing transformation</P></TD>
</TR>
<TR>
	<TD class="tr2 td13"><P class="p63 ft8">drawScene();</P></TD>
	<TD class="tr2 td16"><P class="p72 ft8">//</P></TD>
	<TD colspan=2 class="tr2 td18"><P class="p73 ft8">Draw the entire scene</P></TD>
</TR>
</TABLE>
<P class="p74 ft8">}</P>
<P class="p71 ft4">For more detail, see RobotRace.java.</P>
</DIV>
<DIV id="id_2">
<P class="p12 ft4">8</P>
</DIV>
</DIV>
</BODY>
</HTML>
